// <auto-generated />
using System;
using EFCore.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EFCore.API.Migrations
{
    [DbContext(typeof(AccommodationDBContext))]
    partial class AccommodationDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EFCore.API.Entities.EntityStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("EntityStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("EntityStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 3, 14, 9, 52, 37, 153, DateTimeKind.Utc).AddTicks(8689),
                            Description = "Entity is active and available",
                            EntityStatusId = 1,
                            Name = "Active"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 3, 14, 9, 52, 37, 153, DateTimeKind.Utc).AddTicks(8689),
                            Description = "Entity is temporarily unavailable",
                            EntityStatusId = 1,
                            Name = "Inactive"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 3, 14, 9, 52, 37, 153, DateTimeKind.Utc).AddTicks(8689),
                            Description = "Entity has been deleted for everyone",
                            EntityStatusId = 1,
                            Name = "Deleted for everyone"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 3, 14, 9, 52, 37, 153, DateTimeKind.Utc).AddTicks(8689),
                            Description = "Entity is awaiting activation/verification",
                            EntityStatusId = 1,
                            Name = "Pending"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 3, 14, 9, 52, 37, 153, DateTimeKind.Utc).AddTicks(8689),
                            Description = "Entity has been archived",
                            EntityStatusId = 1,
                            Name = "Archived"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 3, 14, 9, 52, 37, 153, DateTimeKind.Utc).AddTicks(8689),
                            Description = "Entity has been suspended",
                            EntityStatusId = 1,
                            Name = "Suspended"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 3, 14, 9, 52, 37, 153, DateTimeKind.Utc).AddTicks(8689),
                            Description = "Entity has been delete for me",
                            EntityStatusId = 1,
                            Name = "Delete for me"
                        });
                });

            modelBuilder.Entity("EFCore.API.Entities.Hotel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("EntityStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Hotels");
                });

            modelBuilder.Entity("EFCore.API.Entities.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("EntityStatusId")
                        .HasColumnType("int");

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<int>("MaxOccupancy")
                        .HasColumnType("int");

                    b.Property<decimal>("PricePerNight")
                        .HasColumnType("decimal(6, 2)");

                    b.Property<string>("RoomNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("RoomTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("EFCore.API.Entities.RoomType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("EntityStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("RoomTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 3, 14, 9, 52, 37, 153, DateTimeKind.Utc).AddTicks(8689),
                            Description = "Standard room with basic amenities",
                            EntityStatusId = 1,
                            Name = "Standard"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 3, 14, 9, 52, 37, 153, DateTimeKind.Utc).AddTicks(8689),
                            Description = "Deluxe room with enhanced amenities and comfort",
                            EntityStatusId = 1,
                            Name = "Deluxe"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 3, 14, 9, 52, 37, 153, DateTimeKind.Utc).AddTicks(8689),
                            Description = "Suite with separate living area and bedroom",
                            EntityStatusId = 1,
                            Name = "Suite"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 3, 14, 9, 52, 37, 153, DateTimeKind.Utc).AddTicks(8689),
                            Description = "Executive room with business amenities and services",
                            EntityStatusId = 1,
                            Name = "Executive"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 3, 14, 9, 52, 37, 153, DateTimeKind.Utc).AddTicks(8689),
                            Description = "Penthouse suite, typically on the top floor with premium amenities",
                            EntityStatusId = 1,
                            Name = "Penthouse"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 3, 14, 9, 52, 37, 153, DateTimeKind.Utc).AddTicks(8689),
                            Description = "Family room with additional space for families",
                            EntityStatusId = 1,
                            Name = "Family"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 3, 14, 9, 52, 37, 153, DateTimeKind.Utc).AddTicks(8689),
                            Description = "Accessible room designed for guests with disabilities",
                            EntityStatusId = 1,
                            Name = "Accessible"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2025, 3, 14, 9, 52, 37, 153, DateTimeKind.Utc).AddTicks(8689),
                            Description = "Single room designed for one person",
                            EntityStatusId = 1,
                            Name = "Single"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2025, 3, 14, 9, 52, 37, 153, DateTimeKind.Utc).AddTicks(8689),
                            Description = "Double room with a queen or king-sized bed",
                            EntityStatusId = 1,
                            Name = "Double"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2025, 3, 14, 9, 52, 37, 153, DateTimeKind.Utc).AddTicks(8689),
                            Description = "Twin room with two separate beds",
                            EntityStatusId = 1,
                            Name = "Twin"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2025, 3, 14, 9, 52, 37, 153, DateTimeKind.Utc).AddTicks(8689),
                            Description = "Presidential suite, the most luxurious accommodation",
                            EntityStatusId = 1,
                            Name = "Presidential"
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2025, 3, 14, 9, 52, 37, 153, DateTimeKind.Utc).AddTicks(8689),
                            Description = "Villa or cottage separate from the main hotel building",
                            EntityStatusId = 1,
                            Name = "Villa"
                        });
                });

            modelBuilder.Entity("EFCore.API.Entities.Room", b =>
                {
                    b.HasOne("EFCore.API.Entities.Hotel", "Hotel")
                        .WithMany("Rooms")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFCore.API.Entities.RoomType", "RoomType")
                        .WithMany("Rooms")
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("EFCore.API.Entities.Hotel", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("EFCore.API.Entities.RoomType", b =>
                {
                    b.Navigation("Rooms");
                });
#pragma warning restore 612, 618
        }
    }
}
